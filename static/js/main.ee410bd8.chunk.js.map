{"version":3,"sources":["AKQA-Logo.svg","trashcan.svg","Components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","id","items","map","item","index","key","name","size","price","type","className","onChange","event","quantityHandler","target","value","amount","onClick","toFixed","src","Trashcan","alt","App","state","subTotal","vat","total","calcPrice","forEach","setState","componentDidMount","handleAmount","operator","newItems","Number","console","log","width","AKQAlogo","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee410bd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AKQA-Logo.68a06e33.svg\";","module.exports = __webpack_public_path__ + \"static/media/trashcan.cb37ce7e.svg\";","import React from \"react\";\nimport Trashcan from \"../trashcan.svg\";\nimport \"./table.css\";\n\nconst Table = props => {\n  return (\n    <table id=\"itemList\">\n      <thead>\n        <tr>\n          <th>Product</th>\n          <th>Price</th>\n          <th>Qty</th>\n          <th>Cost</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.items.map((item, index) => {\n          return (\n            <tr key={item.id}>\n              <td>\n                {item.name}, {item.size}\n              </td>\n              <td>{item.price}</td>\n              <td>\n                <div id=\"quantityBox\">\n                  <input\n                    type=\"number\"\n                    className=\"quantityNumber\"\n                    onChange={(event) => props.quantityHandler(item.id, event.target.value)}\n                    value={item.amount}\n                  />\n                  <div\n                    className=\"quantityChanger\"\n                    onClick={() => props.quantityHandler(item.id, \"+\")}\n                  >\n                    +\n                  </div>\n                  <div\n                    className=\"quantityChanger\"\n                    onClick={() => props.quantityHandler(item.id, \"–\")}\n                  >\n                    –\n                  </div>\n                </div>\n              </td>\n              <td>£{(item.amount * item.price).toFixed(2)}</td>\n              <td>\n                <div>\n                  <img src={Trashcan} alt=\"delete symbol\" />\n                </div>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport AKQAlogo from \"./AKQA-Logo.svg\";\nimport \"./App.css\";\nimport Table from \"./Components/Table\";\nimport items from \"./items.json\";\n\nclass App extends Component {\n  state = {\n    subTotal: 0,\n    vat: 0,\n    total: 0,\n    items: [...items]\n  };\n\n  calcPrice = () => {\n    let subTotal = 0;\n    items.forEach(item => {\n      subTotal += item.price * item.amount;\n    });\n    let vat = (subTotal * 20) / 100;\n    let total = vat + subTotal;\n\n    this.setState({\n      subTotal: subTotal,\n      vat: vat,\n      total: total\n    });\n  };\n\n  componentDidMount = () => {\n    this.calcPrice();\n  };\n\n  handleAmount = (id, event) => {\n    let operator = event;\n    let newItems = [...this.state.items];\n    if (operator === \"+\") {\n      this.state.items.forEach((item, index) => {\n        if (item.id === id) {\n          newItems[index].amount = Number(newItems[index].amount) + 1;\n          this.setState(\n            {\n              items: newItems\n            },\n            this.calcPrice()\n          );\n        }\n      });\n    } else if (operator === \"–\") {\n      this.state.items.forEach((item, index) => {\n        if (item.id === id && item.amount > 1) {\n          newItems[index].amount = Number(newItems[index].amount - 1);\n          this.setState(\n            {\n              items: newItems\n            },\n            this.calcPrice()\n          );\n        }\n      });\n    } else {\n      this.state.items.forEach((item, index) => {\n        if (item.id === id) {\n          console.log(\"Hallo\");\n          newItems[index].amount = event;\n          this.setState(\n            {\n              items: newItems\n            },\n            this.calcPrice()\n          );\n        }\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main>\n          <img id=\"logo\" width=\"150px\" src={AKQAlogo} alt=\"AKQA logo\" />\n          <section id=\"description\">\n            <h1>Your Basket</h1>\n            <p>\n              Items you have added to your header are shown below. <br></br>\n              Adjust the quantities or remove items before continuing your\n              purchase.\n            </p>\n          </section>\n          <section id=\"productList\">\n            <Table\n              items={this.state.items}\n              quantityHandler={this.handleAmount}\n            />\n          </section>\n          <section id=\"priceCalculation\">\n            <table>\n              <tbody>\n                <tr>\n                  <td>Subtotal</td>\n                  <td>£{this.state.subTotal.toFixed(2)}</td>\n                </tr>\n                <tr>\n                  <td>VAT @ 20%</td>\n                  <td>£{this.state.vat.toFixed(2)}</td>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Total Cost</b>\n                  </td>\n                  <td>\n                    <b>£{this.state.total.toFixed(2)}</b>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </section>\n          <button id=\"buyButton\">Buy Now »</button>\n        </main>\n        <footer>\n          <p>\n            <b>&#9400; 2013 AKQA Ltd.</b> Registered in England: 2964394\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}