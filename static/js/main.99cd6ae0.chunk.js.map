{"version":3,"sources":["assets/images/AKQA-Logo.svg","assets/images/trashcan.svg","Components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","id","items","map","item","index","key","name","className","size","price","type","onChange","event","quantityHandler","target","value","onBlur","blur","amount","onClick","toFixed","src","Trashcan","alt","delete","App","state","subTotal","vat","total","calcPrice","forEach","setState","componentDidMount","handleAmount","operator","newItems","Number","handleBlur","handleDelete","splice","handleSubmit","axios","post","then","response","submitted","catch","err","console","log","handleAlert","newState","buyButtonState","this","length","itemAmount","width","AKQAlogo","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99cd6ae0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AKQA-Logo.68a06e33.svg\";","module.exports = __webpack_public_path__ + \"static/media/trashcan.cb37ce7e.svg\";","import React from \"react\";\nimport Trashcan from \"../assets/images/trashcan.svg\";\nimport \"../assets/styles/table.css\";\n\nconst Table = props => {\n  return (\n    <table id=\"itemList\">\n      <thead>\n        <tr>\n          <th>Product</th>\n          <th>Price</th>\n          <th>Qty</th>\n          <th>Cost</th>\n          <th></th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {props.items.map((item, index) => {\n          return (\n            <tr key={item.id}>\n              <td>\n                {item.name}, <br className=\"lineBreak\"></br> {item.size}\n              </td>\n              <td>{item.price}</td>\n              <td>\n                <div id=\"quantityBox\">\n                  <input\n                    type=\"number\"\n                    className=\"quantityNumber\"\n                    onChange={event =>\n                      props.quantityHandler(item.id, event.target.value)\n                    }\n                    onBlur={() => props.blur(item.id)}\n                    value={item.amount}\n                  />\n                  <div\n                    className=\"quantityChanger\"\n                    onClick={() => props.quantityHandler(item.id, \"+\")}\n                  >\n                    +\n                  </div>\n                  <div\n                    className=\"quantityChanger\"\n                    onClick={() => props.quantityHandler(item.id, \"–\")}\n                  >\n                    –\n                  </div>\n                </div>\n              </td>\n              <td>£{(item.amount * item.price).toFixed(2)}</td>\n              <td>\n                <div>\n                  <img\n                    src={Trashcan}\n                    alt=\"delete symbol\"\n                    onClick={() => props.delete(item.id)}\n                  />\n                </div>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport AKQAlogo from \"./assets/images/AKQA-Logo.svg\";\nimport \"./assets/styles/App.css\";\nimport Table from \"./Components/Table\";\nimport items from \"./items.json\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    subTotal: 0,\n    vat: 0,\n    total: 0,\n    items: [...items]\n  };\n\n  /* ----------------------- price calculation function ----------------------- */\n  calcPrice = () => {\n    let subTotal = 0;\n    this.state.items.forEach(item => {\n      subTotal += item.price * item.amount;\n    });\n    let vat = (subTotal * 20) / 100;\n    let total = vat + subTotal;\n\n    this.setState({\n      subTotal: subTotal,\n      vat: vat,\n      total: total\n    });\n  };\n\n  /* -------------------- calculates initital default price ------------------- */\n  componentDidMount = () => {\n    this.calcPrice();\n  };\n\n  /* ------------------- handles changes of item quantities ------------------- */\n  handleAmount = (id, event) => {\n    let operator = event;\n    let newItems = [...this.state.items];\n\n    if (operator === \"+\") {\n      this.state.items.forEach((item, index) => {\n        if (item.id === id && newItems[index].amount < 10) {\n          newItems[index].amount = Number(newItems[index].amount) + 1;\n          this.setState(\n            {\n              items: newItems\n            },\n            () => this.calcPrice()\n          );\n        }\n      });\n    } else if (operator === \"–\") {\n      this.state.items.forEach((item, index) => {\n        if (item.id === id && item.amount > 1) {\n          newItems[index].amount = Number(newItems[index].amount - 1);\n          this.setState(\n            {\n              items: newItems\n            },\n            () => this.calcPrice()\n          );\n        }\n      });\n    } else {\n      this.state.items.forEach((item, index) => {\n        if (item.id === id) {\n          if (Number(event) !== 0) {\n            newItems[index].amount = Number(event).toFixed(0);\n          } else {\n            newItems[index].amount = event;\n          }\n          if (newItems[index].amount < 0 || newItems[index].amount === \"0\") {\n            newItems[index].amount = 1;\n          }\n          /*           if (newItems[index].amount > 10) {\n            newItems[index].amount = 10;\n          } */\n          this.setState(\n            {\n              items: newItems\n            },\n            () => this.calcPrice()\n          );\n        }\n      });\n    }\n  };\n\n  /* --- if invalid or to high input: resets to minimum or maximum quantity after defocusing input -- */\n  handleBlur = id => {\n    let newItems = [...this.state.items];\n    this.state.items.forEach((item, index) => {\n      if (item.id === id && newItems[index].amount > 10) {\n        newItems[index].amount = 10;\n        this.setState(\n          {\n            items: newItems\n          },\n          () => this.calcPrice()\n        );\n      }\n      if (item.id === id && !item.amount) {\n        newItems[index].amount = 1;\n        this.setState(\n          {\n            items: newItems\n          },\n          () => this.calcPrice()\n        );\n      }\n    });\n  };\n\n  /* ------------------ handles list after deletion of items ------------------ */\n  handleDelete = id => {\n    let newItems = [...this.state.items];\n    this.state.items.forEach((item, index) => {\n      if (item.id === id) {\n        newItems.splice(index, 1);\n        this.setState(\n          {\n            items: newItems\n          },\n          () => this.calcPrice()\n        );\n      }\n    });\n  };\n\n  /* -------------------- handles shopping cart submission -------------------- */\n  handleSubmit = event => {\n    if (event.target.className === \"activated\") {\n      axios\n        .post(\"/blank\", this.state)\n        .then(response => {\n          this.setState({\n            submitted: true\n          });\n        })\n        .catch(err => {\n          console.log(\"err\", err);\n          this.setState({\n            submitted: true\n          });\n        });\n    }\n  };\n\n  /* --------------------------- close alert message -------------------------- */\n  handleAlert = () => {\n    let newState = this.state;\n    delete newState.submitted;\n    this.setState({\n      newState\n    });\n  };\n\n  render() {\n    let buyButtonState = \"activated\";\n    if (!this.state.items.length) {\n      buyButtonState = \"deactivated\";\n    }\n    let itemAmount = 0;\n    this.state.items.forEach(item => {\n      itemAmount += Number(item.amount);\n    });\n\n    return (\n      <div className=\"App\">\n        <main>\n          <img id=\"logo\" width=\"150px\" src={AKQAlogo} alt=\"AKQA logo\" />\n          <section id=\"description\">\n            <h1>Your Basket</h1>\n            <p>\n              Items you have added to your header are shown below. <br></br>\n              Adjust the quantities or remove items before continuing your\n              purchase.\n            </p>\n          </section>\n          <section id=\"productList\">\n            <Table\n              items={this.state.items}\n              quantityHandler={this.handleAmount}\n              blur={this.handleBlur}\n              delete={this.handleDelete}\n            />\n          </section>\n          <section id=\"priceCalculation\">\n            <table>\n              <tbody>\n                <tr>\n                  <td>Subtotal</td>\n                  <td>£{this.state.subTotal.toFixed(2)}</td>\n                </tr>\n                <tr>\n                  <td>VAT @ 20%</td>\n                  <td>£{this.state.vat.toFixed(2)}</td>\n                </tr>\n                <tr>\n                  <td>\n                    <b>Total Cost</b>\n                  </td>\n                  <td>\n                    <b>£{this.state.total.toFixed(2)}</b>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </section>\n          <button\n            id=\"buyButton\"\n            className={buyButtonState}\n            type=\"submit\"\n            onClick={this.handleSubmit}\n          >\n            Buy Now »\n          </button>\n        </main>{\" \"}\n        {this.state.submitted && (\n          <div id=\"alert\">\n            <div id=\"message\">\n              <span>\n                {\" \"}\n                Your order has been succesfully submitted. <br></br>You bought{\" \"}\n                <b>{itemAmount} items</b> worth{\" \"}\n                <b>£{Number(this.state.total).toFixed(2)}</b> in total.\n              </span>\n              <span onClick={this.handleAlert}>close</span>\n            </div>\n          </div>\n        )}\n        <footer>\n          <p>\n            <b>&#9400; 2013 AKQA Ltd.</b> Registered in England: 2964394\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}